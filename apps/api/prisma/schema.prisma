// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Enum for reaction types
enum ReactionEnum {
  like
  dislike
  love
  funny
  inspiring
}

/// Enum for the status of posts and comments
enum Status {
  published
  deleted
  flagged
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(USER)
  posts     Post[]
  comments  Comment[]
  reactions Reaction[]
  password  String
}

model Post {
  id            String   @id @default(uuid())
  title         String
  content       String
  reactionCount Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status

  // Relations
  comments  Comment[]
  reactions Reaction[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Storing image URLs as a Postgres array of strings
  imageUrls   String[]
  TagsOnPosts TagsOnPosts[]
}

model Comment {
  id            String   @id @default(uuid())
  content       String
  postId        String
  authorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status
  imageUrls     String?
  reactionCount Int?

  // Relations
  post      Post       @relation(fields: [postId], references: [id])
  author    User       @relation(fields: [authorId], references: [id])
  reactions Reaction[]

  // Self-relations for nested replies: One to Many
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Reaction {
  id        String       @id @default(uuid())
  reaction  ReactionEnum
  userId    String
  parentId  String // The id of the Post or Comment being reacted to
  type      String // "Post" or "Comment"
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TagsOnPosts TagsOnPosts[]
}

model TagsOnPosts {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}
